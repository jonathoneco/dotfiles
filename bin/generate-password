#!/bin/bash

# Generate a password with pattern: xxxxxx-xxxxxx-xxxxxx
# Each group follows: consonant-vowel-consonant-consonant-vowel-consonant
# Then randomly uppercase one letter and swap another for a digit

set -euo pipefail

consonants=(b c d f g h j k l m n p r s t v w x z)
vowels=(a e i o u)
digits=(0 1 2 3 4 5 6 7 8 9)

# Function to get a random element from an array
get_random() {
    local arr=("$@")
    echo "${arr[RANDOM % ${#arr[@]}]}"
}

# Function to generate one 6-character group (CVCCVC pattern)
generate_group() {
    local group=""
    group+=$(get_random "${consonants[@]}")
    group+=$(get_random "${vowels[@]}")
    group+=$(get_random "${consonants[@]}")
    group+=$(get_random "${consonants[@]}")
    group+=$(get_random "${vowels[@]}")
    group+=$(get_random "${consonants[@]}")
    echo "$group"
}

# Generate three groups
group1=$(generate_group)
group2=$(generate_group)
group3=$(generate_group)

# Combine with hyphens
password="${group1}-${group2}-${group3}"

# Convert to array of characters (without hyphens for easier manipulation)
password_no_hyphens="${group1}${group2}${group3}"
password_array=()
for ((i=0; i<${#password_no_hyphens}; i++)); do
    password_array+=("${password_no_hyphens:i:1}")
done

# Randomly uppercase one letter
uppercase_pos=$((RANDOM % ${#password_array[@]}))
password_array[$uppercase_pos]=$(echo "${password_array[$uppercase_pos]}" | tr '[:lower:]' '[:upper:]')

# Randomly swap another position for a digit (ensure it's different from uppercase position)
digit_pos=$((RANDOM % ${#password_array[@]}))
while [ $digit_pos -eq $uppercase_pos ]; do
    digit_pos=$((RANDOM % ${#password_array[@]}))
done
password_array[$digit_pos]=$(get_random "${digits[@]}")

# Reconstruct password with hyphens at positions 6 and 12
final_password=""
for ((i=0; i<${#password_array[@]}; i++)); do
    if [ $i -eq 6 ] || [ $i -eq 12 ]; then
        final_password+="-"
    fi
    final_password+="${password_array[$i]}"
done

echo "$final_password"
