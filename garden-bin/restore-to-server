#!/bin/bash

# Restore script to push backup to server

# Configuration
REMOTE_HOST="jonco@garden-bed.local"
REMOTE_PORT="3212"
REMOTE_DIR="~/src/garden-bed"
LOCAL_BACKUP_DIR="$HOME/backups/garden-bed"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Parse arguments
BACKUP_TO_RESTORE="${1:-latest}"

echo -e "${BLUE}=== Garden-bed Restore Script ===${NC}"

# Resolve backup path
if [ "$BACKUP_TO_RESTORE" == "latest" ]; then
    BACKUP_PATH="$LOCAL_BACKUP_DIR/latest"
else
    BACKUP_PATH="$LOCAL_BACKUP_DIR/$BACKUP_TO_RESTORE"
fi

# Check if backup exists
if [ ! -d "$BACKUP_PATH" ]; then
    echo -e "${RED}Backup not found: $BACKUP_PATH${NC}"
    echo -e "\nAvailable backups:"
    ls -1 "$LOCAL_BACKUP_DIR" | grep -E '^[0-9]{8}_[0-9]{6}$'
    exit 1
fi

# Show backup info
echo -e "\n${YELLOW}Backup to restore:${NC}"
if [ -f "$BACKUP_PATH/backup-info.txt" ]; then
    cat "$BACKUP_PATH/backup-info.txt"
fi

# Confirm
echo -e "\n${RED}WARNING: This will overwrite files on the server!${NC}"
read -p "Continue? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Aborted."
    exit 1
fi

# Restore
echo -e "\n${YELLOW}Restoring backup to server...${NC}"
rsync -avz --progress \
    --exclude='backup-info.txt' \
    -e "ssh -p $REMOTE_PORT" \
    "$BACKUP_PATH/" \
    "$REMOTE_HOST:$REMOTE_DIR/"

if [ $? -eq 0 ]; then
    echo -e "\n${GREEN}✓ Restore completed successfully!${NC}"
else
    echo -e "\n${RED}✗ Restore failed!${NC}"
    exit 1
fi